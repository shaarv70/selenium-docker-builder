<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.shaarv70</groupId>
    <artifactId>selenium-docker</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <selenium.java.version>4.11.0</selenium.java.version>
        <logback.version>1.4.8</logback.version>
        <webdriver.manager.version>5.4.0</webdriver.manager.version>
        <testng.version>7.8.0</testng.version>
        <jackson.version>2.12.0</jackson.version>
        <!-- plugins versions -->
        <maven.compiler.version>3.11.0</maven.compiler.version>
        <maven.dependency.version>3.6.0</maven.dependency.version>
        <maven.jar.version>3.3.0</maven.jar.version>
        <maven.surefire.version>3.1.2</maven.surefire.version>
        <maven.resources.plugin>3.3.1</maven.resources.plugin>
        <!-- output directory -->
        <package.directory>${project.build.directory}/docker-resources</package.directory>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.java.version}</version>
        </dependency>
        <!-- logging library -->
        <!-- https://www.baeldung.com/logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <!-- To deserialize json into Java object or vice versa -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Test framework -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>selenium-docker</finalName> <!--This is the name given for jar files after packaging-->
        <plugins>
            <!-- To compile the source code using specific java version. also to force IDE to change the settings -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <release>17</release>
                </configuration>
            </plugin>
            <!-- To run the tests using specific parameters, change thread count, testng report output directory etc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.version}</version>
                <configuration>
                    <!--mvn clean test -Dbrowser=chrome -Dselenium.grid.enabled=true-->
                    <systemPropertyVariables>
                        <browser>chrome</browser>
                        <selenium.grid.enabled>true</selenium.grid.enabled> <!--we have done this so that we can run our test locally or -->
                    </systemPropertyVariables>
                    <suiteXmlFiles>
                        <file>src/test/resources/test-suites/flight-reservation.xml</file>
                        <file>src/test/resources/test-suites/vendor-portal.xml</file>
                    </suiteXmlFiles>
                    <threadCount>4</threadCount>
                    <!--Reports will be generated in below path -->
                    <reportsDirectory>target/test-output</reportsDirectory>
                </configuration>
            </plugin>
            <!-- To copy all the dependencies to run our tests as part of "mvn package" -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!--package directory is mentioned above, in that package directory libs
                            folder it will create and package all dependencied from src folder and put it here-->
                            <outputDirectory>
                                ${package.directory}/libs
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- To package our page objects, test classes into jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.version}</version>
                <configuration>
                    <!--here in libs folder maven will package src main and src test files,by default maven
                      only packages src main so below we have mentioned the goal for src test folder also-->
                    <outputDirectory>${package.directory}/libs</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal><!--We are using this since maven mainly focuses on packaging of src/main but not src/test-->
                        </goals>
                        <configuration>
                            <!--here we are only packagig those files which have .class filetype other than this it will not
                            include in packaging-->
                            <includes>**/*.class</includes>  <!--This means **-package *-classname-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- To copy resources into the output directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!--here we are copying all resources which do not have .class filetype-->
                            <outputDirectory>${package.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/resources</directory>
                                </resource>
                                <resource>
                                    <!-- below code is used if we have any file which is present in project root directory
                                    and we want to include it in package directory then below lines we can use
                                    (. means project root directory(take from project root directory and paste it in paclage directory))  -->
                                    <directory>.</directory>
                                    <includes>
                                        <include>dummy.txt</include>
                                    </includes>

                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>